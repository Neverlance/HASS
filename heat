blueprint:
  name: Heating Control with Daily Schedule
  description: >
    Control your heating system with individually configurable time periods and temperatures for each day of the week.
  domain: automation
  input:
    temperature_sensor:
      name: Temperature Sensor
      description: Select the sensor measuring the room temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    heater_entity:
      name: Heater
      description: Select the heating entity (climate or radiator valve).
      selector:
        entity:
          domain: climate
    default_temperature:
      name: Default Temperature
      description: Temperature to apply during time gaps between periods.
      default: 20
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    hysteresis:
      name: Hysteresis
      description: Tolerance range to avoid frequent toggling of the heater.
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5
          step: 0.1
          unit_of_measurement: "°C"
    monday_times:
      name: Monday - Times and Temperatures
      default:
        morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
        day: {start: "09:00:00", end: "15:30:00", temperature: 18}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    tuesday_times:
      name: Tuesday - Times and Temperatures
      default:
        morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
        day: {start: "09:00:00", end: "15:30:00", temperature: 18}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    wednesday_times:
      name: Wednesday - Times and Temperatures
      default:
        morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
        day: {start: "09:00:00", end: "15:30:00", temperature: 18}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    thursday_times:
      name: Thursday - Times and Temperatures
      default:
        morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
        day: {start: "09:00:00", end: "15:30:00", temperature: 18}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    friday_times:
      name: Friday - Times and Temperatures
      default:
        morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
        day: {start: "09:00:00", end: "15:30:00", temperature: 18}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    saturday_times:
      name: Saturday - Times and Temperatures
      default:
        morning: {start: "07:00:00", end: "10:00:00", temperature: 20}
        day: {start: "10:00:00", end: "15:30:00", temperature: 20}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}
    sunday_times:
      name: Sunday - Times and Temperatures
      default:
        morning: {start: "07:00:00", end: "10:00:00", temperature: 20}
        day: {start: "10:00:00", end: "15:30:00", temperature: 20}
        evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
        night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}

trigger:
  - platform: state
    entity_id: !input temperature_sensor

variables:
  current_temperature: "{{ states(input.temperature_sensor) | float }}"
  hysteresis: "{{ input.hysteresis }}"
  heater_entity: "{{ input.heater_entity }}"
  today_config: >
    {% set today = now().strftime('%A').lower() %}
    {{ {
      "monday": input.monday_times,
      "tuesday": input.tuesday_times,
      "wednesday": input.wednesday_times,
      "thursday": input.thursday_times,
      "friday": input.friday_times,
      "saturday": input.saturday_times,
      "sunday": input.sunday_times
    }[today] }}
  target_temperature: >
    {% set now_time = now().strftime('%H:%M:%S') %}
    {% if now_time >= today_config['morning']['start'] and now_time < today_config['morning']['end'] %}
      {{ today_config['morning']['temperature'] }}
    {% elif now_time >= today_config['day']['start'] and now_time < today_config['day']['end'] %}
      {{ today_config['day']['temperature'] }}
    {% elif now_time >= today_config['evening']['start'] and now_time < today_config['evening']['end'] %}
      {{ today_config['evening']['temperature'] }}
    {% elif now_time >= today_config['night']['start'] or now_time < today_config['night']['end'] %}
      {{ today_config['night']['temperature'] }}
    {% else %}
      {{ input.default_temperature }}
    {% endif %}

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ current_temperature < (target_temperature - hysteresis) }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: "{{ heater_entity }}"
            data:
              hvac_mode: "heat"
      - conditions:
          - condition: template
            value_template: >
              {{ current_temperature > (target_temperature + hysteresis) }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: "{{ heater_entity }}"
            data:
              hvac_mode: "off"
    default: []
