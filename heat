blueprint:
  name: Heating Control with Weekly Configuration
  description: >
    Control your heating system with individual schedules and temperatures for each day of the week.
    Supports time periods (Morning, Day, Evening, Night) and a default temperature for gaps.
  domain: automation
  input:
    temperature_sensor:
      name: Temperature Sensor
      description: Select the sensor measuring the room temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    heater_entity:
      name: Heater
      description: Select the heating entity (climate or radiator valve).
      selector:
        entity:
          domain: climate
    default_temperature:
      name: Default Temperature
      description: Temperature to apply during time gaps between periods.
      default: 20
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    hysteresis:
      name: Hysteresis
      description: Tolerance range to avoid frequent toggling of the heater.
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5
          step: 0.1
          unit_of_measurement: "°C"
    weekly_schedule:
      name: Weekly Schedule
      description: Configure temperatures and time periods for each day of the week.
      default:
        monday:
          morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 18}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        tuesday:
          morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 18}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        wednesday:
          morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 18}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        thursday:
          morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 18}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        friday:
          morning: {start: "06:30:00", end: "09:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 18}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        saturday:
          morning: {start: "06:30:00", end: "10:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 20}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
        sunday:
          morning: {start: "06:30:00", end: "10:00:00", temperature: 20}
          day: {start: "10:00:00", end: "15:30:00", temperature: 20}
          evening: {start: "15:30:00", end: "21:00:00", temperature: 20}
          night: {start: "21:00:00", end: "06:00:00", temperature: 18}
      selector:
        object: {}

trigger:
  - platform: state
    entity_id: !input temperature_sensor

variables:
  temperature_sensor: !input temperature_sensor
  current_temperature: "{{ states[temperature_sensor].state | float }}"
  hysteresis: !input hysteresis
  heater_entity: !input heater_entity
  today_schedule: >
    {{ input.weekly_schedule[now().strftime('%A').lower()] }}
  target_temperature: >
    {% set now_time = now().strftime('%H:%M:%S') %}
    {% for period, config in today_schedule.items() %}
      {% if config.start <= now_time < config.end %}
        {{ config.temperature }}
      {% endif %}
    {% endfor %}
    {{ input.default_temperature }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ current_temperature < (target_temperature - hysteresis) }}
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input heater_entity
            data:
              temperature: "{{ target_temperature }}"
      - conditions:
          - condition: template
            value_template: >
              {{ current_temperature > (target_temperature + hysteresis) }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heater_entity
            data:
              hvac_mode: "off"
    default: []
